using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using QuizAppPG.DTOs; // Corrected: Use QuizAppPG.DTOs for DTOs
using QuizAppPG.Services.Api;
using QuizAppPG.Services.Local; // For IDialogService, INavigationService, ISecureStorageService
using QuizAppPG.Services.Realtime;
using QuizAppPG.Views.Game;
using System.Collections.ObjectModel;
using System.Linq; // For LINQ operations
using System; // For Guid
using Microsoft.AspNetCore.SignalR.Client; // Added for HubConnectionState
using Microsoft.Maui.Controls; // For MainThread

namespace QuizAppPG.ViewModels.Game
{
    [QueryProperty(nameof(GameSessionId), "GameSessionId")]
    public partial class GameLobbyViewModel : BaseViewModel
    {
        private readonly IGameApiService _gameApiService;
        private readonly IGameHubClient _gameHubClient;
        // _secureStorageService, _dialogService, _navigationService are inherited

        [ObservableProperty]
        private string gameSessionId = string.Empty; // Initialized

        [ObservableProperty]
        private string hostUsername = string.Empty; // Initialized

        [ObservableProperty]
        private string categoryName = string.Empty; // Initialized

        [ObservableProperty]
        private string difficulty = string.Empty; // Initialized

        [ObservableProperty]
        private ObservableCollection<GameSessionPlayerDto> players = new();

        [ObservableProperty]
        private bool isHost;

        public GameLobbyViewModel(
            IGameApiService gameApiService,
            IGameHubClient gameHubClient,
            ISecureStorageService secureStorageService, // <<< ADD THIS PARAMETER
            IDialogService dialogService,
            INavigationService navigationService)
            : base(navigationService, dialogService, secureStorageService) // <<< PASS THIS PARAMETER
        {
            _gameApiService = gameApiService;
            _gameHubClient = gameHubClient;
            Title = "Spellobby";

            // Subscribe to SignalR events
            _gameHubClient.PlayerJoined += OnPlayerJoined;
            _gameHubClient.GameStarted += OnGameStarted;
            _gameHubClient.ReceiveError += OnReceiveError;
        }

        // --- QueryProperty handler ---
        // This method needs to be partial as it's auto-generated by the `QueryProperty` attribute
        partial void OnGameSessionIdChanged(string value)
        {
            if (!string.IsNullOrEmpty(value))
            {
                _ = LoadGameSessionDetailsAndJoinAsync(); // Use `_ =` to suppress warning for unawaited Task
            }
        }

        // --- Public methods for page lifecycle ---
        public override void OnAppearing() // Override BaseViewModel's method
        {
            base.OnAppearing(); // Call base implementation
            // Ensure connection on appearing, or rely on GameHubClient's auto-reconnect
            // It's crucial that GameHubClient is already connected before calling JoinGame.
            _ = ConnectAndJoinGameHubAsync(); // Use `_ =` to suppress warning for unawaited Task
        }

        public override void OnDisappearing() // Override BaseViewModel's method
        {
            base.OnDisappearing(); // Call base implementation
            // Unsubscribe from SignalR events to prevent memory leaks if ViewModel isn't GC'd immediately
            _gameHubClient.PlayerJoined -= OnPlayerJoined;
            _gameHubClient.GameStarted -= OnGameStarted;
            _gameHubClient.ReceiveError -= OnReceiveError;
            // Consider disconnecting from hub if leaving game completely
        }

        // --- Core Logic ---
        private async Task ConnectAndJoinGameHubAsync()
        {
            await _gameHubClient.ConnectAsync(); // Ensure hub is connected
            if (_gameHubClient.State == HubConnectionState.Connected) // HubConnectionState is in Microsoft.AspNetCore.SignalR.Client
            {
                await _gameHubClient.JoinGame(GameSessionId);
            }
            else
            {
                await _dialogService.ShowAlertAsync("Anslutningsfel", "Kunde inte ansluta till spelets hub.");
            }
        }

        private async Task LoadGameSessionDetailsAndJoinAsync()
        {
            if (IsBusy) return;
            if (string.IsNullOrEmpty(GameSessionId)) return;

            IsBusy = true;
            try
            {
                var result = await _gameApiService.GetGameSessionDetailsAsync(Guid.Parse(GameSessionId));
                if (result.IsSuccess && result.Data != null)
                {
                    HostUsername = result.Data.HostUsername;
                    CategoryName = result.Data.CategoryName;
                    Difficulty = result.Data.Difficulty.ToString();
                    Players.Clear();
                    foreach (var player in result.Data.Players)
                    {
                        Players.Add(player);
                    }

                    var currentUsernameFromStorage = await _secureStorageService.GetUsernameAsync(); // Use inherited _secureStorageService
                    IsHost = result.Data.HostUsername == currentUsernameFromStorage; // Better to compare HostId with currentUserId
                }
                else
                {
                    await _dialogService.ShowAlertAsync("Fel", result.ErrorMessage ?? "Kude inte ladda spelsessionens detaljer.");
                    await _navigationService.PopAsync(); // Go back if unable to load
                }
            }
            catch (Exception ex)
            {
                await _dialogService.ShowAlertAsync("Fel", $"Ett oväntat fel uppstod: {ex.Message}");
                await _navigationService.PopAsync(); // Go back if unable to load
            }
            finally
            {
                IsBusy = false;
            }
        }

        // --- SignalR Event Handlers ---
        private void OnPlayerJoined(List<GameSessionPlayerDto> updatedPlayers)
        {
            MainThread.BeginInvokeOnMainThread(() =>
            {
                Players.Clear();
                foreach (var player in updatedPlayers)
                {
                    Players.Add(player);
                }
                _dialogService.ShowAlertAsync("Spelare anslöt", $"{updatedPlayers.LastOrDefault()?.Username} anslöt till lobbyn.");
            });
        }

        private async void OnGameStarted() // Changed to async void for event handler
        {
            MainThread.BeginInvokeOnMainThread(async () =>
            {
                await _dialogService.ShowAlertAsync("Spel Startat!", "Spelet har börjat!");
                var navigationParameters = new Dictionary<string, object>
                {
                    { "GameSessionId", GameSessionId }
                };
                await _navigationService.GoToAsync(nameof(MultiplayerGamePage), navigationParameters);
            });
        }

        private void OnReceiveError(string error)
        {
            MainThread.BeginInvokeOnMainThread(async () =>
            {
                await _dialogService.ShowAlertAsync("Fel från server", error);
            });
        }


        // --- Commands ---
        [RelayCommand]
        private async Task StartGameAsync()
        {
            if (IsBusy) return;

            IsBusy = true;
            try
            {
                // Logic handled by GameHubClient, which will then trigger OnGameStarted event
                await _gameHubClient.StartGame(GameSessionId);
            }
            catch (Exception ex)
            {
                await _dialogService.ShowAlertAsync("Fel", $"Kude inte starta spelet: {ex.Message}");
            }
            finally
            {
                IsBusy = false;
            }
        }

        [RelayCommand]
        private async Task LeaveLobbyAsync()
        {
            var confirm = await _dialogService.ShowConfirmAsync("Lämna lobbyn", "Är du säker på att du vill lämna lobbyn?", "Ja", "Nej");
            if (!confirm) return;

            await _gameHubClient.DisconnectAsync(); // Disconnect from SignalR hub
            await _navigationService.PopAsync(); // Go back to previous page
        }
    }
}